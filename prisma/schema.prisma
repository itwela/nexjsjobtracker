// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @unique
  firstName        String?
  lastName         String?
  username         String?
  email            String         @unique
  stripeCustomerId String?        @unique
  profileImg       String?
  Subscription     Subscription?
  Jobs             Job[]
  Resumes          Resume[] // Define a one-to-many relationship with Resume
  CoverLetters     CoverLetter[]
  Introductions    Introduction[]
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
}

model CoverLetter {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?  @relation(fields: [userId], references: [id])
  userId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

model Introduction {
  id   String @id @default(uuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?  @relation(fields: [userId], references: [id])
  userId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

model Job {
  id              String   @id @default(uuid())
  JobTitle        String
  Company         String
  DateApplied     String?
  Status          String?
  Link            String
  Resumes         Resume[] // Define a one-to-many relationship with Resume
  ResumeUsed      String?
  Keywords        String?
  Interviewed     Boolean      @default(false) // Defaulting to false

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?  @relation(fields: [userId], references: [id])
  userId String

  coverLetters  CoverLetter[] // Change from CoverLetter? to CoverLetter[]
  introductions Introduction[]
}

model Resume {
  id        String   @id @default(uuid())
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  Job       Job?     @relation(fields: [jobId], references: [id])
  jobId     String?
}
